/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React from 'react'
import { useGLTF } from '@react-three/drei'

const SEGMENT_MAP = [
  { key: 'hair', node: 'man_1' },
  { key: 'skin', node: 'man_2' },
  { key: 'torso', node: 'man_3' },
  { key: 'legs', node: 'man_4' },
  { key: 'eye1', node: 'man_5' },
  { key: 'eye2', node: 'man_6' },
  { key: 'eye3', node: 'man_7' },
  { key: 'teeth1', node: 'man_8' },
  { key: 'teeth2', node: 'man_9' },
  { key: 'teeth3', node: 'man_10' }
]

const FALLBACK_SEGMENT_MAP = [
  { key: 'hair', node: 'man_1' },
  { key: 'skin', node: 'man_2' },
  { key: 'torso', node: 'man_3' },
  { key: 'legs', node: 'man_4' }
]

export function MasculineWithFeatures ({ handleSelected, handleHovered, clearHovered, colors, ...groupProps }) {
  const { nodes } = useGLTF('/man.glb')

  const availableSegments = SEGMENT_MAP.filter(({ node }) => nodes[node])
  const segmentsToUse = availableSegments.length > 0 ? availableSegments : FALLBACK_SEGMENT_MAP

  return (
    <group {...groupProps} dispose={null}>
      {segmentsToUse.map(({ key, node }) => {
        const geometry = nodes[node]?.geometry ?? nodes.man?.geometry
        if (!geometry) return null
        return (
          <mesh
            key={key}
            onPointerMove={(event) => handleHovered(key, event.clientX, event.clientY)}
            onPointerOut={clearHovered}
            onClick={(event) => handleSelected(key, event.clientX, event.clientY)}
            castShadow
            receiveShadow
            geometry={geometry}
            material-color={colors[key]}
          />
        )
      })}
    </group>
  )
}

useGLTF.preload('/man.glb')
